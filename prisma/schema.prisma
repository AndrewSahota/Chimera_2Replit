
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Trading related
  bots      Bot[]
  orders    Order[]
  positions Position[]

  @@map("users")
}

model Bot {
  id        String    @id @default(cuid())
  name      String
  strategy  String
  status    BotStatus @default(STOPPED)
  config    Json?
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orders Order[]

  @@map("bots")
}

model Order {
  id             String      @id @default(cuid())
  symbol         String
  side           OrderSide
  type           OrderType
  quantity       Int
  price          Float?
  stopPrice      Float?
  status         OrderStatus @default(PENDING)
  filledQuantity Int         @default(0)
  avgFillPrice   Float?
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  botId          String?
  bot            Bot?        @relation(fields: [botId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("orders")
}

model Position {
  id               String   @id @default(cuid())
  symbol           String
  quantity         Int
  avgPrice         Float
  currentPrice     Float?
  unrealizedPnl    Float?
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([userId, symbol])
  @@map("positions")
}

model MarketData {
  id        String   @id @default(cuid())
  symbol    String
  price     Float
  change    Float
  volume    Int
  high      Float
  low       Float
  open      Float
  timestamp DateTime
  createdAt DateTime @default(now())

  @@unique([symbol, timestamp])
  @@map("market_data")
}

enum BotStatus {
  RUNNING
  STOPPED
  ERROR
}

enum OrderSide {
  BUY
  SELL
}

enum OrderType {
  MARKET
  LIMIT
  STOP
  STOP_LIMIT
}

enum OrderStatus {
  PENDING
  FILLED
  CANCELLED
  REJECTED
}
